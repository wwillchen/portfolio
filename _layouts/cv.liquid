---
layout: default
---
<div class="post cv-page">
  <div class="cv-layout">
    <!-- Left Sidebar Navigation -->
    <nav class="cv-sidebar" aria-label="CV sections">
      <ul class="cv-nav">
        <li><a class="cv-nav-link" href="#education">Education</a></li>
        <li><a class="cv-nav-link" href="#work">Work Experience</a></li>
        <li><a class="cv-nav-link" href="#research">Research</a></li>
        <li><a class="cv-nav-link" href="#projects">Projects</a></li>
      </ul>
      <span class="cv-nav-indicator" aria-hidden="true"></span>
    </nav>

    <article class="cv-content">
      {%- assign resume = site.data.resume | default: nil -%}

      {%- comment -%}
      Add download button if a PDF is configured in front matter (page.cv_pdf)
      Supports absolute URLs, root-relative paths, or filenames in assets/pdf.
      {%- endcomment -%}
      {%- if page.cv_pdf and page.cv_pdf != '' -%}
        {%- assign _cv_pdf = page.cv_pdf | strip -%}
        {%- assign _first_char = _cv_pdf | slice: 0, 1 -%}
        {%- if _cv_pdf contains '://' -%}
          {%- assign pdf_url = _cv_pdf -%}
        {%- elsif _first_char == '/' -%}
          {%- assign pdf_url = _cv_pdf | relative_url -%}
        {%- else -%}
          {%- assign pdf_url = '/assets/pdf/' | append: _cv_pdf | relative_url -%}
        {%- endif -%}
        <div class="cv-actions">
          <a class="cv-download-btn" href="{{ pdf_url }}" target="_blank" rel="noopener">Download PDF</a>
        </div>
      {%- endif -%}

      {%- comment -%}
      Helper: pick items from either object (resume.education) or pair array (['education', [...]])
      {%- endcomment -%}
      {%- assign ed_items = nil -%}
      {%- if resume and resume.education -%}
        {%- assign ed_items = resume.education -%}
      {%- elsif resume -%}
        {%- assign ed_pair = resume | where_exp: 'd', 'd[0] == "education"' | first -%}
        {%- if ed_pair -%}{%- assign ed_items = ed_pair[1] -%}{%- endif -%}
      {%- endif -%}

      {%- comment -%}
      Work items (will filter inside include into Work vs Research)
      {%- endcomment -%}
      {%- assign all_work = nil -%}
      {%- if resume and resume.work -%}
        {%- assign all_work = resume.work -%}
      {%- elsif resume -%}
        {%- assign work_pair = resume | where_exp: 'd', 'd[0] == "work"' | first -%}
        {%- if work_pair -%}{%- assign all_work = work_pair[1] -%}{%- endif -%}
      {%- endif -%}

      {%- comment -%}
      Projects items (support object or pair format)
      {%- endcomment -%}
      {%- assign proj_items = nil -%}
      {%- if resume and resume.projects -%}
        {%- assign proj_items = resume.projects -%}
      {%- elsif resume -%}
        {%- assign proj_pair = resume | where_exp: 'd', 'd[0] == "projects"' | first -%}
        {%- if proj_pair -%}{%- assign proj_items = proj_pair[1] -%}{%- endif -%}
      {%- endif -%}

      <section id="education">
        <h2 class="cv-section-title">Education</h2>
        {%- if ed_items and ed_items != empty -%}
          {% include resume/education.liquid items=ed_items %}
        {%- endif -%}
      </section>

      <section id="work" class="mt-5">
        <h2 class="cv-section-title">Work Experience</h2>
        {%- if all_work and all_work != empty -%}
          {% include resume/work.liquid items=all_work only='work' %}
        {%- endif -%}
      </section>

      <section id="research" class="mt-5">
        <h2 class="cv-section-title">Research</h2>
        {%- if all_work and all_work != empty -%}
          {% include resume/work.liquid items=all_work only='research' %}
        {%- endif -%}
      </section>

      <section id="projects" class="mt-5">
        <h2 class="cv-section-title">Projects</h2>
        {%- if proj_items and proj_items != empty -%}
          {% include resume/projects.liquid items=proj_items %}
        {%- endif -%}
      </section>
    </article>
  </div>
</div>

<style>
  /* Scoped to CV page */
  .cv-page {
    max-width: {{ site.max_width }}; margin: 0 auto;
    /* CV-specific color tokens (work in light & dark) */
    --cv-muted-color: #777; /* dates, meta */
    --cv-pill-bg: rgba(0,0,0,0.06);
  }
  /* Dark-mode overrides for CV page */
  html[data-theme="dark"] .cv-page {
    --cv-muted-color: rgba(255,255,255,0.68);
    --cv-pill-bg: rgba(255,255,255,0.12);
  }

  /* Hide theme TOC on this page (avoid double sidebar) */
  .cv-page #toc,
  .cv-page nav[data-toggle="toc"],
  .cv-page .bs-docs-sidebar,
  .cv-page .toc-sidebar,
  .cv-page .toc { display: none !important; }

  /* Layout */
  .cv-layout { display: grid; grid-template-columns: 200px 1fr; gap: 1.5rem; }
  .cv-content { padding-top: 0.25rem; }
  .cv-content section { scroll-margin-top: calc(var(--header-height, 72px) + 24px); }

  /* Download button */
  .cv-actions { display: flex; justify-content: flex-end; margin: 0.25rem 0 0.75rem; }
  .cv-download-btn {
    display: inline-block;
    padding: 0.5rem 0.8rem;
    border-radius: 8px;
    font-weight: 700;
    text-decoration: none;
    color: #fff;
    background: var(--global-theme-color, #0ea5e9);
  }
  .cv-download-btn:hover { filter: brightness(0.95); }
  .cv-download-btn:focus-visible { outline: 2px solid var(--global-theme-color); outline-offset: 2px; }

  /* Sidebar */
  .cv-sidebar { position: sticky; top: calc(var(--header-height, 72px) + 16px); height: fit-content; align-self: start; --cv-accent: var(--global-theme-color, #0ea5e9); }
  .cv-nav { list-style: none; margin: 0; padding: 0.25rem 0; position: relative; }
  .cv-nav li { margin: 0.15rem 0; }
  .cv-nav-link { display: block; padding: 0.45rem 0.5rem 0.45rem 0.9rem; border-radius: 10px; color: var(--cv-muted-color); font-weight: 700; text-decoration: none; transition: color .15s ease, background .15s ease; }
  .cv-nav-link:hover { color: var(--cv-accent); background: var(--cv-pill-bg); }
  .cv-nav-link.active { color: var(--global-text-color); background: var(--cv-pill-bg); }
  .cv-nav-link:focus-visible { outline: 2px solid var(--global-theme-color); outline-offset: 2px; }
  .cv-nav-indicator { position: absolute; left: 0; top: 0; width: 4px; height: 40px; border-radius: 3px; background: var(--cv-accent); transform: translateY(0); transition: transform .18s ease, height .18s ease, opacity .18s ease; opacity: 0.9; }

  /* Section titles */
  .cv-section-title { font-size: clamp(1.8rem, 4vw, 3rem); font-weight: 800; letter-spacing: -0.02em; margin: 1.25rem 0 0.75rem; }

  /* Lists */
  .cv-list { list-style: none; padding: 0; margin: 0; }
  .cv-item { padding: 1rem 0; border-bottom: 1px solid var(--global-divider-color); cursor: default; }
  .cv-item:last-child { border-bottom: none; }

  /* Row layout: title left, date right */
  .cv-row { display: grid; grid-template-columns: 1fr auto; align-items: center; gap: 1rem; }
  .cv-title { display: flex; align-items: center; gap: 0.5rem; flex-wrap: wrap; }
  .cv-entity { font-size: 1.15rem; font-weight: 700; }
  .cv-pill { font-size: 0.95rem; font-weight: 700; padding: 0.2rem 0.6rem; border-radius: 10px; background: var(--cv-pill-bg); }
  .cv-date { color: var(--cv-muted-color); font-weight: 600; white-space: nowrap; }
  .cv-subtitle { margin-top: 0.35rem; color: var(--global-text-color); }
  .cv-role { color: var(--global-text-color); margin-top: 0.15rem; }

  /* Expandable details */
  .cv-item[data-cv-toggle] { cursor: pointer; }
  .cv-item-details { display: none; margin-top: 0.75rem; }
  .cv-item.expanded .cv-item-details { display: block; }
  .cv-item ul { margin: 0.25rem 0 0 1rem; }

  /* Caret */
  .cv-caret { display: inline-block; transition: transform 0.2s ease; margin-left: 0.25rem; }
  .cv-item.expanded .cv-caret { transform: rotate(180deg); }

  /* Projects grid */
  .cv-projects-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(260px, 1fr)); gap: 1rem; margin-top: 0.5rem; }
  .cv-project-card { border: 1px solid var(--global-divider-color); border-radius: 12px; padding: 1rem; background: var(--global-card-bg-color); box-shadow: 0 1px 2px rgba(0,0,0,0.03); transition: transform .12s ease, box-shadow .12s ease; }
  .cv-project-card:hover { transform: translateY(-2px); box-shadow: 0 6px 16px rgba(0,0,0,0.08); }
  .cv-project-header { display: grid; grid-template-columns: 1fr auto; align-items: start; gap: 0.5rem; }
  .cv-project-title { font-weight: 700; font-size: 1.05rem; line-height: 1.2; }
  .cv-project-meta { color: var(--cv-muted-color); font-size: 0.9rem; white-space: nowrap; }
  .cv-project-summary { margin-top: 0.4rem; color: var(--global-text-color); }
  .cv-project-tags { margin-top: 0.5rem; display: flex; flex-wrap: wrap; gap: 0.35rem; }
  .cv-tag { font-size: 0.8rem; padding: 0.15rem 0.5rem; background: var(--cv-pill-bg); border-radius: 999px; }

  /* Responsive */
  @media (max-width: 992px) {
    .cv-layout { grid-template-columns: 1fr; gap: 1.1rem; }
    .cv-sidebar { position: static; }
    .cv-nav { display: flex; gap: 0.5rem; }
    .cv-nav-indicator { display: none; }
  }
  @media (max-width: 576px) {
    .cv-date { font-size: 0.95rem; }
  }

  /* Respect reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .cv-nav-indicator { transition: none; }
    .cv-caret { transition: none; }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Expand/collapse for work items
    document.querySelectorAll('.cv-item[data-cv-toggle]').forEach(function (el) {
      el.addEventListener('click', function (e) {
        if (e.target.closest('a')) return;
        el.classList.toggle('expanded');
      });
      el.setAttribute('tabindex', '0');
      el.addEventListener('keypress', function (e) {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          el.classList.toggle('expanded');
        }
      });
    });

    // Sidebar scrollspy and animated indicator
    const sidebar = document.querySelector('.cv-sidebar');
    const links = Array.from(document.querySelectorAll('.cv-nav-link'));
    const indicator = document.querySelector('.cv-nav-indicator');
    const sections = links.map(l => document.querySelector(l.getAttribute('href'))).filter(Boolean);

    function setActive(idx) {
      links.forEach((l, i) => {
        const active = i === idx;
        l.classList.toggle('active', active);
        if (active) l.setAttribute('aria-current', 'true'); else l.removeAttribute('aria-current');
      });
      requestAnimationFrame(() => moveIndicator(idx));
    }

    function moveIndicator(idx) {
      if (!indicator || !sidebar) return;
      const link = links[idx];
      if (!link) return;
      const sbRect = sidebar.getBoundingClientRect();
      const linkRect = link.getBoundingClientRect();
      const y = linkRect.top - sbRect.top + sidebar.scrollTop; // position within sidebar
      indicator.style.transform = `translateY(${Math.max(0, y)}px)`;
      indicator.style.height = `${linkRect.height}px`;
    }

    // Smooth scroll on click with header offset
    function headerOffset() { try { return parseInt(getComputedStyle(document.documentElement).getPropertyValue('--header-height')) || 72; } catch { return 72; } }
    links.forEach((l, i) => {
      l.addEventListener('click', function (e) {
        const target = document.querySelector(l.getAttribute('href'));
        if (!target) return;
        e.preventDefault();
        const top = target.getBoundingClientRect().top + window.pageYOffset - (headerOffset() + 16);
        window.history.pushState(null, '', l.getAttribute('href'));
        window.scrollTo({ top, behavior: 'smooth' });
        setActive(i);
      });
    });

    // Scrollspy based on scroll position (robust for up/down scrolling)
    if (sections.length) {
      let rafId = null;
      function updateActiveFromScroll() {
        const y = window.pageYOffset + headerOffset() + 24; // account for fixed header
        let idx = 0;
        for (let i = 0; i < sections.length; i++) {
          const secTop = sections[i].getBoundingClientRect().top + window.pageYOffset;
          if (secTop <= y) idx = i; // last section whose top is above the offset line
        }
        setActive(idx);
      }
      function onScroll() {
        if (rafId) cancelAnimationFrame(rafId);
        rafId = requestAnimationFrame(updateActiveFromScroll);
      }
      window.addEventListener('scroll', onScroll, { passive: true });

      // Initialize active state based on hash or current scroll
      if (window.location.hash) {
        const hashIdx = sections.findIndex(s => `#${s.id}` === window.location.hash);
        if (hashIdx >= 0) setActive(hashIdx); else updateActiveFromScroll();
      } else {
        updateActiveFromScroll();
      }

      window.addEventListener('resize', function () {
        const activeIdx = links.findIndex(l => l.classList.contains('active'));
        if (activeIdx >= 0) moveIndicator(activeIdx);
        onScroll();
      });
    }
  });
</script>
